import { fetchApi, Result, apiUrl } from '@innexgo/frontend-common'

export type Tournament = {
  tournamentId: number,
  creationTime: number,
  creatorUserId: number,
  maxYears: number,
  incentiveStartYear: number,
  baselineDemand: number,
  incentiveMultiplier: number,
  costPerUnit: number,
}

export type TournamentData = {
  tournamentDataId: number,
  creationTime: number,
  creatorUserId: number,
  tournament: Tournament,
  title: string,
  active: boolean,
}

export type TournamentYear = {
  tournamentYearId: number,
  creationTime: number,
  creatorUserId: number,
  tournament: Tournament,
  currentYear: number,
}

export type TournamentYearDemand = {
  tournamentYearId: number,
  creationTime: number,
  userId: number,
  tournament: Tournament,
  year: number,
  demand: number,
}


export type TournamentMembership = {
  tournamentDataId: number,
  creationTime: number,
  creatorUserId: number,
  tournament: Tournament,
  active: boolean,
}

export type TournamentSubmission = {
  tournamentSubmissionId: number,
  creationTime: number,
  creatorUserId: number,
  tournament: Tournament,
  amount: number,
  year: number,
  autogenerated: boolean,
}

export const AppErrorCodes = [
  "NO_CAPABILITY",
  "TOURNAMENT_NONEXISTENT",
  "TOURNAMENT_MAX_YEARS_INVALID",
  "TOURNAMENT_INCENTIVE_START_YEAR_INVALID",
  "TOURNAMENT_SUBMISSION_TESTCASE_INCOMPLETE",
  "TOURNAMENT_SUBMISSION_TESTCASE_FAILS",
  "TOURNAMENT_ARCHIVED",
  "TOURNAMENT_STARTED",
  "TOURNAMENT_MEMBERSHIP_INVALID",
  "TOURNAMENT_MAX_YEARS_ACHIEVED",
  "DECODE_ERROR",
  "INTERNAL_SERVER_ERROR",
  "METHOD_NOT_ALLOWED",
  "UNAUTHORIZED",
  "BAD_REQUEST",
  "NOT_FOUND",
  "NETWORK",
  "UNKNOWN",
] as const;

// Creates a union export type
export type AppErrorCode = typeof AppErrorCodes[number];

async function fetchApiOrNetworkError<T>(url: string, props: object): Promise<Result<T, AppErrorCode>> {
  try {
    const [code, resp] = await fetchApi(url, props);
    if (code >= 200 && code < 300) {
      return { Ok: resp }
    } else {
      return { Err: resp }
    }
  } catch (_) {
    return { Err: "NETWORK" };
  }
}

const undefToStr = (s: string | undefined) =>
  s === undefined ? apiUrl() : s

export type TournamentNewProps = {
  title: string,
  baselineDemand: number,
  incentiveMultiplier: number,
  incentiveStartYear: number,
  costPerUnit: number,
  maxYears: number,
  apiKey: string,
}

export function tournamentNew(props: TournamentNewProps, server?: string): Promise<Result<TournamentData, AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament/new", props);
}

export type TournamentDataNewProps = {
  tournamentId: number,
  title: string,
  active: boolean,
  apiKey: string,
}

export function tournamentDataNew(props: TournamentDataNewProps, server?: string): Promise<Result<TournamentData, AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_data/new", props);
}

export type TournamentYearNew = {
  tournamentId: number,
  apiKey: string,
}

export function tournamentYearNew(props: TournamentYearNew, server?: string): Promise<Result<TournamentData, AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_year/new", props);
}

export type TournamentMembershipNewProps = {
  tournamentId: number,
  active: boolean,
  apiKey: string,
}

export function tournamentMembershipNew(props: TournamentMembershipNewProps, server?: string): Promise<Result<TournamentMembership, AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_membership/new", props);
}

export type TournamentSubmissionNewProps = {
  tournamentId: number,
  amount: number,
  apiKey: string,
}

export function tournamentSubmissionNew(props: TournamentSubmissionNewProps, server?: string): Promise<Result<TournamentSubmission, AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_submission/new", props);
}


export type TournamentDataViewProps = {
  tournamentDataId?: number[],
  minCreationTime?: number,
  maxCreationTime?: number,
  creatorUserId?: number[],
  tournamentId?: number[],
  active?: boolean,
  onlyRecent: boolean,
  apiKey: string,
}

export function tournamentDataView(props: TournamentDataViewProps, server?: string): Promise<Result<TournamentData[], AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_data/view", props);
}

export type TournamentMembershipViewProps = {
  tournamentMembershipId?: number[],
  minCreationTime?: number,
  maxCreationTime?: number,
  creatorUserId?: number[],
  tournamentId?: number[],
  active?: boolean,
  onlyRecent: boolean,
  apiKey: string,
}

export function tournamentMembershipView(props: TournamentMembershipViewProps, server?: string): Promise<Result<TournamentMembership[], AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_membership/view", props);
}


export type TournamentSubmissionViewProps = {
  tournamentSubmissionId?: number[],
  minCreationTime?: number,
  maxCreationTime?: number,
  creatorUserId?: number[],
  tournamentId?: number[],
  apiKey: string,
}

export function tournamentSubmissionView(props: TournamentSubmissionViewProps, server?: string): Promise<Result<TournamentSubmission[], AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_submission/view", props);
}

export type TournamentYearViewProps = {
  tournamentYearId?: number[],
  minCreationTime?: number,
  maxCreationTime?: number,
  creatorUserId?: number[],
  tournamentId?: number[],
  onlyRecent: boolean,
  apiKey: string,
}

export function tournamentYearView(props: TournamentYearViewProps, server?: string): Promise<Result<TournamentYear[], AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_year/view", props);
}

export type TournamentYearDemandViewProps = {
  tournamentYearDemandId?: number[],
  minCreationTime?: number,
  maxCreationTime?: number,
  userId?: number[],
  tournamentId?: number[],
  apiKey: string,
}

export function tournamentYearDemandView(props: TournamentYearDemandViewProps, server?: string): Promise<Result<TournamentYearDemand[], AppErrorCode>> {
  return fetchApiOrNetworkError(undefToStr(server) + "/production_minigame/tournament_year_demand/view", props);
}
