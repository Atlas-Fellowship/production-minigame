CREATE DATABASE production_minigame;
\c production_minigame;

-- Table Structure
-- Primary Key
-- Creation Time
-- Creator User Id (if applicable)
-- Everything else

drop table if exists tournament cascade;
create table tournament(
  tournament_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  creator_user_id bigint not null,
  cost_per_unit bigint not null,
  demand_xintercept bigint not null,
  demand_yintercept bigint not null,
  incentive_multiplier bigint not null,
  incentive_start_year bigint not null,
  max_years bigint not null
);

-- invariant: tournament_id is valid
drop table if exists tournament_data cascade;
create table tournament_data(
  tournament_data_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  creator_user_id bigint not null,
  tournament_id bigint not null references tournament(tournament_id),
  -- tournament title
  title text not null,
  -- is the tournament still visible
  active bool not null
);

create view recent_tournament_data as
  select td.* from tournament_data td
  inner join (
   select max(tournament_data_id) id 
   from tournament_data 
   group by tournament_id
  ) maxids
  on maxids.id = td.tournament_data_id;

drop table if exists tournament_year cascade;
create table tournament_year(
  tournament_year_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  creator_user_id bigint not null,
  tournament_id bigint not null references tournament(tournament_id),
  -- tournament year
  current_year bigint not null
);

create view recent_tournament_year as
  select td.* from tournament_year td
  inner join (
   select max(tournament_year_id) id 
   from tournament_year 
   group by tournament_id
  ) maxids
  on maxids.id = td.tournament_year_id;


drop table if exists tournament_year_demand cascade;
create table tournament_year_demand(
  tournament_year_demand_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  -- which user this is for
  user_id bigint not null,
  -- id of tournament
  tournament_id bigint not null references tournament(tournament_id),
  -- tournament year
  year bigint not null,
  -- your personal demand per year (actual)
  demand bigint not null
);

drop table if exists tournament_membership cascade;
create table tournament_membership(
  tournament_membership_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  creator_user_id bigint not null,
  tournament_id bigint not null references tournament(tournament_id),
  active bool not null
);

create view recent_tournament_membership as
  select td.* from tournament_membership td
  inner join (
   select max(tournament_membership_id) id 
   from tournament_membership 
   group by tournament_id, creator_user_id
  ) maxids
  on maxids.id = td.tournament_membership_id;


drop table if exists tournament_submission cascade;
create table tournament_submission(
  tournament_submission_id bigserial primary key,
  creation_time bigint not null default extract(epoch from now()) * 1000,
  creator_user_id bigint not null,
  tournament_id bigint not null references tournament(tournament_id),
  year bigint not null,
  amount bigint not null,
  autogenerated bool not null 
);
